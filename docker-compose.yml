services:
  flask:
    build: .  # 現在のディレクトリにあるDockerfileを使用してFlaskアプリケーションのイメージをビルドします
    ports:
      - "5000:5000"  # ホストの5000番ポートをコンテナの5000番ポートにマッピングします
    volumes:
      - ./src/app:/app  # ホストの指定したディレクトリをコンテナの/appディレクトリにマッピングします
    depends_on:
      - postgresql  # postgresqlサービスが起動した後にflaskサービスを起動します
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgresql/postgres  # 環境変数を設定します

  postgresql:
    image: postgres:latest  # 最新のPostgreSQLイメージを使用します
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres  # PostgreSQLのユーザー名、パスワード、データベース名を設定します
    ports: 
      - "5432:5432"  # ホストの5432番ポートをコンテナの5432番ポートにマッピングします

  nginx:
    image: nginx:latest  # 最新のNginxイメージを使用します
    ports:
      - "80:80"  # ホストの80番ポートをコンテナの80番ポートにマッピングします
    volumes:
      - ./for_develop/nginx/nginx.conf:/etc/nginx/nginx.conf  # ホストのnginx設定ファイルをコンテナの設定ファイルにマッピングします
    depends_on:
      - flask  # flaskサービスが起動した後にnginxサービスを起動します

  service_pgadmin:
    image: dpage/pgadmin4:latest  # 最新のpgAdmin4イメージを使用します
    container_name: container_pgadmin  # コンテナの名前を設定します
    ports:
      - 8080:80  # ホストの8080番ポートをコンテナの80番ポートにマッピングします
    volumes:
      - volume_pgadmin:/var/lib/pgadmin  # ホストの指定したボリュームをコンテナの/var/lib/pgadminディレクトリにマッピングします
    environment:
      PGADMIN_DEFAULT_EMAIL: example@example.com
      PGADMIN_DEFAULT_PASSWORD: password  # pgAdminのデフォルトのメールアドレスとパスワードを設定します
    depends_on:
      - postgresql   # service_postgresサービスが起動した後にservice_pgadminサービスを起動します

volumes:
  volume_postgres:
    name: vpg  # volume_postgresという名前のボリュームを作成します
  volume_pgadmin:
    name: vpga  # volume_pgadminという名前のボリュームを作成します